import pandas as pd
from pandas import DataFrame
import numpy as np
import matplotlib.pyplot as plt

excelf=pd.ExcelFile('daneEZR.xlsx')

dane=excelf.parse('1')

dane


plt.plot(dane['Czas_lata'],dane['q'])
plt.grid(True)


plt.semilogy(dane['Czas_lata'],dane['q'])
plt.grid(True)

plt.loglog(dane['Czas_lata'],dane['q'])
plt.grid(True)


f, axs = plt.subplots(1,3,figsize=(20,6))
plt.subplot(131)
plt.plot(dane['Czas_lata'],dane['q'])
plt.title('Wykres q(t)')

plt.subplot(132)
plt.semilogy(dane['Czas_lata'],dane['q'])
plt.title('Wykres log(q(t))')

plt.subplot(133)
plt.loglog(dane['Czas_lata'],dane['q'])
plt.title('Wykres log(q(log(t)))')

Text(0.5,1,'Wykres log(q(log(t)))')


qi=dane['q'][0]
q2=dane['q'][8]
q1=np.sqrt(qi*q2)
q1=np.array([q1,q1,q1,q1,q1,q1,q1,q1,q1])
plt.semilogy(dane['Czas_lata'],dane['q'])
plt.plot(dane['Czas_lata'],q1,marker='_')
plt.grid(True)
print(q1)


t1=float(input("odczytaj czas z wykresu powyżej (oś x)"))
q1=np.sqrt(qi*q2)
qi=float(dane['q'][0])
q2=float(dane['q'][8])
t2=dane['Czas_lata'][8]


def f(b):
    fb=t2*(qi/q1)**b-t1*(qi/q2)**b-(t2-t1)
    return fb

def df(b):
    f1b=t2*(qi/q1)**b*np.log(qi/q1)-t1*(qi/q2)**b*np.log(qi/q2)
    return f1b

def iterate():
    b=1
    bnew=0.5
    err=np.abs(b-bnew)
    i=0
    while err > 10**(-6):
        i+=1
        print('iteracja', i)
        fb=f(b)
        print('fb', fb)
        f1b=df(b)
        print('f1b', f1b)
        bnew=b-(fb/f1b)
        print('bk', bnew)
        err=np.abs(b-bnew)
        print('err', err)
        b=bnew
    return bnew
        
def iteracja():
    b=1
    bk=0.5
    err=np.abs(b-bk)
    i=0
    while err > 10**(-6):
        i+=1
        print('iteracja', i)
        fb=t2*(qi/q1)**b-t1*(qi/q2)**b-(t2-t1)
        print('fb', fb)
        f1b=t2*(qi/q1)**b*np.log(qi/q1)-t1*(qi/q2)**b*np.log(qi/q2)
        print('f1b', f1b)
        bk=b-fb/f1b
        print('bk', bk)
        err=np.abs(b-bk)
        print('err', err)
        b=bk
    return bk

b=iterate()
print('b=',b)


Di=(((qi/q2)**b)-1)/(b*t2)
print("Di=",Di,'1/rok')
Di=((((qi/q2)**b)-1)/(b*t2))/365
print("Di=",Di,'1/dzień')



def predict_Gp(times):
    global Qt
    Gp=[]
    Qt=[]
    for i in range(len(times)):
        qt=qi/((1+b*Di*times[i])**(1/b))
        Qt.append(qt)
        
        gpt=(qi/(Di*(1-b)))*(1-(qt/qi)**(1-b))
        Gp.append(gpt)
        
    Qt=np.array(Qt)
    return  Gp


ts=np.array(np.arange(4.5*365,26.5*365,182.5))
Gp=predict_Gp(ts)


data_predicted=pd.DataFrame(ts,columns=['Czas_lata'])
data_predicted['q']=Qt
data_predicted['Gp']=Gp
data_predicted['Gp']=data_predicted['Gp']/1000
data_predicted['Czas_lata']=data_predicted['Czas_lata']/365
datafull=pd.concat([dane,data_predicted],ignore_index=True)
datafull




plt.plot(datafull['Czas_lata'],datafull['q'])
plt.plot(datafull['Czas_lata'],datafull['Gp'])
plt.grid(True)
plt.title('Zmiana wydobycia [Gp] i wydatku [q] w czasie')
plt.legend()
